generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  image         String
  accounts      Account[]
  sessions      Session[]
  groups        Group[]
  notifications Notification[]
  role          Role           @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id     Int      @id @default(autoincrement())
  name   String
  images Image[]
  tags   String[] @default([])
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  approvedAt     DateTime?
  lastReviewedAt DateTime?

  @@index([name], map: "name_gin")
  @@index([tags], map: "tags_gin")
}

model Image {
  id        String   @id
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  GROUP_APPROVED
  GROUP_REJECTED
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  actionUrl String           @default("")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
